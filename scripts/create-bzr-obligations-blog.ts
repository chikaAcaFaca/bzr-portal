/**
 * Skripta za kreiranje blog posta o obavezama lica za bezbednost i zdravlje na radu
 * Koristi Gemini API za generisanje sadr≈æaja i kreira novi blog post
 */

import { exit } from 'process';
import { db } from '../server/db';
import { config } from '../server/config';
import { storage } from '../server/storage';
import axios from 'axios';

// Direktno koristi Gemini API sa API kljuƒçem iz konfiguracije
const geminiApiKey = config.geminiApiKey;
const geminiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent';

// Funkcija za transliteraciju ƒáirilice i latinice sa dijakritiƒçkim znakovima
function transliterate(text: string): string {
  const cyrillicToLatin: Record<string, string> = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '—í': 'dj', '–µ': 'e', '–∂': 'z',
    '–∑': 'z', '–∏': 'i', '—ò': 'j', '–∫': 'k', '–ª': 'l', '—ô': 'lj', '–º': 'm', '–Ω': 'n',
    '—ö': 'nj', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—õ': 'c', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'c', '—á': 'c', '—ü': 'dz', '—à': 's',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–Ç': 'Dj', '–ï': 'E', '–ñ': 'Z',
    '–ó': 'Z', '–ò': 'I', '–à': 'J', '–ö': 'K', '–õ': 'L', '–â': 'Lj', '–ú': 'M', '–ù': 'N',
    '–ä': 'Nj', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–ã': 'C', '–£': 'U',
    '–§': 'F', '–•': 'H', '–¶': 'C', '–ß': 'C', '–è': 'Dz', '–®': 'S',
    'ƒç': 'c', 'ƒá': 'c', 'ƒë': 'dj', '≈°': 's', '≈æ': 'z',
    'ƒå': 'C', 'ƒÜ': 'C', 'ƒê': 'Dj', '≈†': 'S', '≈Ω': 'Z'
  };

  return text.split('').map(char => cyrillicToLatin[char] || char).join('');
}

function generateSlug(title: string): string {
  const transliterated = transliterate(title.toLowerCase());
  return transliterated
    .replace(/[^\w\s-]/g, '')  // Uklanjanje specijalnih karaktera
    .replace(/\s+/g, '-')      // Zamena razmaka sa crticama
    .replace(/-+/g, '-')       // Zamena vi≈°estrukih crtica sa jednom
    .trim();
}

/**
 * Funkcija koja generi≈°e sadr≈æaj o obavezama lica za BZR
 */
async function generateBZRObligationsContent() {
  const systemPrompt = `Ti si ekspert za bezbednost i zdravlje na radu u Srbiji. 
  Napi≈°i detaljan, informativan i struƒçan tekst o obavezama lica za bezbednost i zdravlje na radu prema va≈æeƒáem Zakonu o bezbednosti i zdravlju na radu u Republici Srbiji (Slu≈æbeni glasnik RS, broj 35/2023).
  
  Tekst treba da bude strukturiran kao kvalitetan blog post sa sledeƒáim elementima:
  1. Uvodni deo koji obja≈°njava ko je lice za bezbednost i zdravlje na radu
  2. Zakonski okvir koji defini≈°e obaveze lica za BZR
  3. Temeljno nabrojane i obja≈°njene sve pojedinaƒçne zakonske obaveze
  4. Znaƒçaj uloge lica za BZR u organizaciji
  5. Preporuke za efikasno obavljanje poslova lica za BZR
  
  Koristi Markdown formatiranje sa naslovima, podnaslovima, listama i nagla≈°enim tekstom.
  Navedi konkretne ƒçlanove zakona koji se odnose na svaku obavezu.
  Ukljuƒçi praktiƒçne savete za primenu zakonskih odredbi.
  Ne izmi≈°ljaj informacije i dr≈æi se iskljuƒçivo va≈æeƒáeg zakonodavstva Republike Srbije.`;

  const userQuery = "Napravi mi detaljan spisak svih obaveza lica za bezbednost i zdravlje na radu prema aktuelnom zakonu.";

  try {
    console.log('≈†aljem upit Gemini API...');
    
    if (!geminiApiKey) {
      throw new Error('Gemini API kljuƒç nije postavljen');
    }
    
    const fullUrl = `${geminiUrl}?key=${geminiApiKey}`;
    
    const response = await axios.post(fullUrl, {
      contents: [
        {
          role: 'user',
          parts: [
            { text: systemPrompt },
            { text: userQuery }
          ]
        }
      ],
      generationConfig: {
        temperature: 0.2,
        maxOutputTokens: 8192
      }
    }, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status !== 200) {
      throw new Error(`Gemini API gre≈°ka: ${response.status} ${response.statusText}`);
    }
    
    // Izvlaƒçimo tekst odgovora
    const contentText = response.data.candidates?.[0]?.content?.parts?.[0]?.text || '';
    
    if (!contentText) {
      throw new Error('Prazan odgovor od Gemini API');
    }
    
    return contentText;
  } catch (error: any) {
    console.error('Gre≈°ka pri generisanju sadr≈æaja:', error);
    if (error.response) {
      console.error('Gemini API odgovor:', error.response.status, error.response.data);
    }
    throw new Error(`Gemini API gre≈°ka: ${error.message}`);
  }
}

/**
 * Provera da li veƒá postoje blog postovi koji odgovaraju na pitanje
 */
async function checkExistingBlogPosts() {
  try {
    console.log('Provera postojeƒáih blog postova...');
    
    // Dobavljanje svih blog postova
    const allPosts = await storage.getAllBlogPosts();
    
    // Kljuƒçne reƒçi za pretragu
    const keywords = ['lice za bezbednost', 'obaveze lica za BZR', 'bezbednost i zdravlje na radu'];
    
    // Filtriraj postove koji sadr≈æe kljuƒçne reƒçi u naslovu, sadr≈æaju ili tagovima
    const relevantPosts = allPosts.filter(post => {
      const title = post.title.toLowerCase();
      const content = post.content.toLowerCase();
      const tags = post.tags ? post.tags.join(' ').toLowerCase() : '';
      
      return keywords.some(keyword => 
        title.includes(keyword.toLowerCase()) || 
        content.includes(keyword.toLowerCase()) ||
        tags.includes(keyword.toLowerCase())
      );
    });
    
    console.log(`Pronaƒëeno ${relevantPosts.length} relevantnih blog postova.`);
    
    return relevantPosts;
  } catch (error) {
    console.error('Gre≈°ka pri proveri postojeƒáih blog postova:', error);
    return [];
  }
}

/**
 * Glavna funkcija koja kreira blog post ili vraƒáa postojeƒáe
 */
async function createBZRObligationsBlogPost() {
  try {
    console.log('Analiziram potrebu za novim blog postom o obavezama lica za BZR...');
    
    // Prvo proverimo postojeƒáe blog postove
    const existingPosts = await checkExistingBlogPosts();
    
    // Ako veƒá imamo vi≈°e od 3 relevantna posta
    if (existingPosts.length >= 3) {
      console.log('Pronaƒëeno dovoljno postojeƒáih blog postova. Nema potrebe za novim.');
      
      return {
        id: 0,
        title: 'Zbirni post sa linkovima',
        message: 'Veƒá postoje relevantni postovi',
        existingPosts: existingPosts.map(post => ({
          id: post.id,
          title: post.title,
          slug: post.slug
        }))
      };
    }
    
    // Ako imamo 1-2 postojeƒáa posta, ali ≈æelimo kompletirajuƒái post
    if (existingPosts.length > 0 && existingPosts.length < 3) {
      console.log(`Pronaƒëeno ${existingPosts.length} postojeƒáih blog postova. Kreiram dopunski post.`);
    }
    
    // Generisanje sadr≈æaja novog posta
    const content = await generateBZRObligationsContent();
    
    // Definisanje metapodataka blog posta
    const title = 'Obaveze lica za bezbednost i zdravlje na radu: Sveobuhvatan vodiƒç';
    const slug = generateSlug(title);
    const excerpt = 'Detaljni pregled svih zakonskih obaveza lica za bezbednost i zdravlje na radu prema najnovijem Zakonu o bezbednosti i zdravlju na radu Republike Srbije.';
    const imageUrl = 'https://images.unsplash.com/photo-1581094794329-c8112a89af12?w=800&auto=format&fit=crop';
    
    // Kreiranje blog posta
    const blogPost = await storage.createBlogPost({
      title,
      slug,
      content,
      excerpt,
      imageUrl,
      category: 'propisi',
      tags: ['lice za BZR', 'zakonske obaveze', 'bezbednost i zdravlje na radu', 'zakon o BZR'],
      status: 'published',
      authorId: null, // AI generisani sadr≈æaj
      publishedAt: new Date()
    });
    
    console.log(`Uspe≈°no kreiran blog post ID: ${blogPost.id}`);
    console.log(`Naslov: ${blogPost.title}`);
    console.log(`Slug: ${blogPost.slug}`);
    console.log(`Status: ${blogPost.status}`);
    
    return {
      ...blogPost,
      existingPosts: existingPosts.map(post => ({
        id: post.id,
        title: post.title,
        slug: post.slug
      }))
    };
  } catch (error) {
    console.error('Gre≈°ka pri kreiranju blog posta:', error);
    throw error;
  }
}

/**
 * Pokretanje skripte
 */
async function main() {
  try {
    console.log('Zapoƒçinjem analizu i kreiranje blog posta o obavezama lica za BZR...');
    const result = await createBZRObligationsBlogPost();
    
    if (result.message === 'Veƒá postoje relevantni postovi') {
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      console.log('üîç PRONAƒêENI POSTOJEƒÜI BLOG POSTOVI O OBAVEZAMA LICA ZA BZR');
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      
      result.existingPosts.forEach((post, index) => {
        console.log(`${index + 1}. ${post.title} (ID: ${post.id})`);
        console.log(`   URL: /blog/${post.slug}`);
      });
      
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      console.log('‚úÖ Nema potrebe za kreiranjem novog blog posta jer veƒá postoji dovoljno sadr≈æaja.');
    } else {
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      console.log('‚úÖ BLOG POST USPE≈†NO KREIRAN!');
      console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
      console.log(`ID: ${result.id}`);
      console.log(`Naslov: ${result.title}`);
      console.log(`URL: /blog/${result.slug}`);
      console.log(`Status: ${result.status}`);
      
      if (result.existingPosts && result.existingPosts.length > 0) {
        console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
        console.log('üîç TAKOƒêE PRONAƒêENI POSTOJEƒÜI RELEVANTNI BLOG POSTOVI:');
        
        result.existingPosts.forEach((post, index) => {
          console.log(`${index + 1}. ${post.title} (ID: ${post.id})`);
          console.log(`   URL: /blog/${post.slug}`);
        });
      }
    }
    
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    exit(0);
  } catch (error) {
    console.error('Gre≈°ka pri izvr≈°avanju skripte:', error);
    exit(1);
  }
}

main();